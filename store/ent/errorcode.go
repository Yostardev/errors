// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Yostardev/errors/store/ent/errorcode"
)

// ErrorCode is the model entity for the ErrorCode schema.
type ErrorCode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 错误码
	ErrorCode int `json:"error_code,omitempty"`
	// Grpc状态
	GrpcStatus uint32 `json:"grpc_status,omitempty"`
	// 错误名（唯一标识）
	Name string `json:"name,omitempty"`
	// 错误信息
	Message string `json:"message,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ErrorCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case errorcode.FieldID, errorcode.FieldErrorCode, errorcode.FieldGrpcStatus:
			values[i] = new(sql.NullInt64)
		case errorcode.FieldName, errorcode.FieldMessage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ErrorCode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ErrorCode fields.
func (ec *ErrorCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case errorcode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int(value.Int64)
		case errorcode.FieldErrorCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_code", values[i])
			} else if value.Valid {
				ec.ErrorCode = int(value.Int64)
			}
		case errorcode.FieldGrpcStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field grpc_status", values[i])
			} else if value.Valid {
				ec.GrpcStatus = uint32(value.Int64)
			}
		case errorcode.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ec.Name = value.String
			}
		case errorcode.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				ec.Message = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ErrorCode.
// Note that you need to call ErrorCode.Unwrap() before calling this method if this ErrorCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *ErrorCode) Update() *ErrorCodeUpdateOne {
	return NewErrorCodeClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the ErrorCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *ErrorCode) Unwrap() *ErrorCode {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: ErrorCode is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *ErrorCode) String() string {
	var builder strings.Builder
	builder.WriteString("ErrorCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("error_code=")
	builder.WriteString(fmt.Sprintf("%v", ec.ErrorCode))
	builder.WriteString(", ")
	builder.WriteString("grpc_status=")
	builder.WriteString(fmt.Sprintf("%v", ec.GrpcStatus))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ec.Name)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(ec.Message)
	builder.WriteByte(')')
	return builder.String()
}

// ErrorCodes is a parsable slice of ErrorCode.
type ErrorCodes []*ErrorCode
